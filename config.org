#+TITLE: Vanilla Emacs Config
#+AUTHOR: Bibit Kunwar Chhetri
#+PROPERTY: header-args :tangle yes :results silent :exports code
#+STARTUP: overview indent hideblocks inlineimages entitiespretty
#+OPTIONS: toc:3 num:nil author:nil
#+LANGUAGE: en
#+CATEGORY: emacs-config
#+FILETAGS: emacs config

* TABLE OF CONTENTS :toc:
- [[#startup-essentials][Startup Essentials]]
  - [[#package-manager-straightel][Package Manager (straight.el)]]
  - [[#evil-mode-vim-emulation][Evil Mode (Vim Emulation)]]
  - [[#general-keybindings-hotkeys][General Keybindings (hotkeys)]]
- [[#startup-services][Startup Services]]
- [[#fonts][Fonts]]
  - [[#font-face][Font Face]]
  - [[#zoom-inout][Zoom In/Out]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#menubar-toolbar--scrollbar][Menubar, Toolbar & Scrollbar]]
  - [[#line-numbering][Line Numbering]]
- [[#backup-strategy][Backup Strategy]]
- [[#org-mode-enhancements][Org Mode Enhancements]]
  - [[#enable-toc--org-bullets][Enable TOC & Org Bullets]]
  - [[#org-tempo][Org Tempo]]
- [[#sudo-edit][SUDO Edit]]
- [[#which-key][Which-Key]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#transparency][Transparency]]
- [[#theme-minimal-dark][Theme (Minimal Dark)]]

* Startup Essentials
** Package Manager (straight.el)
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC

** Evil Mode (Vim Emulation)
#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil
      evil-want-integration t
      evil-split-window-right t
      evil-split-window-below t)

(straight-use-package 'evil)
(require 'evil)
(evil-mode 1)

(straight-use-package 'evil-collection)
(with-eval-after-load 'evil
  (require 'evil-collection)
  (evil-collection-init))

(straight-use-package 'evil-tutor)
#+END_SRC

** General Keybindings (hotkeys)
#+BEGIN_SRC emacs-lisp
(straight-use-package 'general)
(require 'general)
(general-evil-setup)

(general-create-definer my/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "M-SPC")

(my/leader-keys
 ;; Buffer
 "b"  '(:ignore t :which-key "buffer")
 "b b" '(ivy-switch-buffer :which-key "Switch buffer")
 "b k" '(kill-this-buffer :which-key "Kill buffer")
 "b n" '(next-buffer :which-key "Next buffer")
 "b p" '(previous-buffer :which-key "Previous buffer")
 "b r" '(revert-buffer :which-key "Reload buffer")
 "b B" '(ivy-switch-buffer-other-window :which-key "Switch buffer other window")

 ;; File
 "f" '(:ignore t :which-key "file")
 "f f" '(counsel-find-file :which-key "Find file")
 "f r" '(counsel-recentf :which-key "Recent files")
 "f d" '(counsel-dired :which-key "Open dired")
 "f p" '(sudo-edit-find-file :which-key "Sudo find file")
 "f P" '(sudo-edit :which-key "Sudo edit file")

 ;; Window
 "w"  '(:ignore t :which-key "window")
 "w v" '(split-window-right :which-key "Split vertical")
 "w s" '(split-window-below :which-key "Split horizontal")
 "w c" '(delete-window :which-key "Delete window")
 "w o" '(delete-other-windows :which-key "Maximize window")
 "w j" '(evil-window-down :which-key "Move to window below")
 "w k" '(evil-window-up :which-key "Move to window above")
 "w h" '(evil-window-left :which-key "Move to window left")
 "w l" '(evil-window-right :which-key "Move to window right")
 "w w" '(other-window :which-key "Switch to other window")

 ;; Search
 "s" '(:ignore t :which-key "search")
 "s f" '(counsel-rg :which-key "Search in files")
 "s b" '(counsel-switch-buffer :which-key "Search buffers")
 "s m" '(counsel-imenu :which-key "Search in buffer")

 ;; Evaluate
 "e" '(:ignore t :which-key "Evaluate")    
 "e b" '(eval-buffer :which-key "Evaluate elisp in buffer")
 "e d" '(eval-defun :which-key "Evaluate defun containing or after point")
 "e e" '(eval-expression :which-key "Evaluate an elisp expression")
 "e l" '(eval-last-sexp :which-key "Evaluate elisp expression before point")
 "e r" '(eval-region :which-key "Evaluate elisp in region")

 ;; Help
 "h" '(:ignore t :which-key "Help")
 "h f" '(counsel-describe-function :which-key "Describe function")
 "h v" '(counsel-describe-variable :which-key "Describe variable")
 "h r r" '((lambda () (interactive)
             (load-file "~/.emacs.d/init.el"))
            :which-key "Reload emacs config")

 ;; Toggle
 "t" '(:ignore t :which-key "Toggle")
 "t l" '(display-line-numbers-mode :which-key "Toggle line numbers")
 "t t" '(visual-line-mode :which-key "Toggle truncated lines")

 ;; Applications
 "a" '(:ignore t :which-key "applications")
 "a a" '(counsel-M-x :which-key "M-x")
 "a r" '(ivy-resume :which-key "Resume last search"))
#+END_SRC

* Startup Services
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (which-key-mode 1)
            (global-visual-line-mode 1)
            (global-display-line-numbers-mode 1)
            (setq display-line-numbers-type 'relative)
            (recentf-mode 1)
            (column-number-mode 1)
            (display-time-mode 1)))
#+END_SRC

* Fonts
** Font Face
#+BEGIN_SRC emacs-lisp
;; Use system fonts that are guaranteed to be available on macOS
(when (display-graphic-p)
  (when (member "SF Mono" (font-family-list))
    (set-face-attribute 'default nil :font "SF Mono" :height 110 :weight 'medium)
    (add-to-list 'default-frame-alist '(font . "SF Mono-11")))
  
  (when (member "Helvetica" (font-family-list))
    (set-face-attribute 'variable-pitch nil :font "Helvetica" :height 120 :weight 'medium)))

;; Use JetBrains Mono if available (when display is available)
(when (and (display-graphic-p) (member "JetBrains Mono" (font-family-list)))
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 110 :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11")))

(when (and (display-graphic-p) (member "Ubuntu" (font-family-list)))
  (set-face-attribute 'variable-pitch nil :font "Ubuntu" :height 120 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 110 :weight 'medium))

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
(setq-default line-spacing 0.12)
#+END_SRC

** Zoom In/Out
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SRC

* GUI Tweaks
** Menubar, Toolbar & Scrollbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(when (eq system-type 'darwin)
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (set-frame-parameter (selected-frame) 'undecorated-round t))
#+END_SRC

** Line Numbering
#+BEGIN_SRC emacs-lisp
;; Line numbering is configured in Startup Services section
#+END_SRC

* Backup Strategy
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backups"))
      version-control t
      kept-new-versions 5
      kept-old-versions 2
      delete-old-versions t)
(unless (file-exists-p "~/.emacs.d/backups")
  (make-directory "~/.emacs.d/backups" t))
#+END_SRC

* Org Mode Enhancements
** Enable TOC & Org Bullets
#+BEGIN_SRC emacs-lisp
(straight-use-package 'toc-org)
(straight-use-package 'org-bullets)

(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode 1)
            (org-bullets-mode 1)
            (toc-org-enable)))

(setq org-bullets-bullet-list '("◉" "○" "◈" "◇" "▪" "▫"))
#+END_SRC

** Org Tempo
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC

* SUDO Edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :config
  (my/leader-keys
    "f p" '(sudo-edit-find-file :which-key "Sudo find file")
    "f P" '(sudo-edit :which-key "Sudo edit file")))
#+END_SRC

* Which-Key
#+BEGIN_SRC emacs-lisp
(straight-use-package 'which-key)
(require 'which-key)
(which-key-mode 1)

(setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-min-display-lines 6
      which-key-idle-delay 0.8
      which-key-separator "   ")
#+END_SRC

* IVY (COUNSEL)
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ivy)
(straight-use-package 'counsel)
(straight-use-package 'ivy-rich)
(straight-use-package 'swiper)
(straight-use-package 'all-the-icons-ivy-rich)

(setq ivy-use-virtual-buffers t
      ivy-count-format "(%d/%d) "
      enable-recursive-minibuffers t)

(ivy-mode 1)
(counsel-mode 1)
(ivy-rich-mode 1)

;; Enable all-the-icons-ivy-rich for better visual experience
;; Use a hook to ensure it loads after all-the-icons
(add-hook 'after-init-hook
          (lambda ()
            (when (require 'all-the-icons-ivy-rich nil t)
              (all-the-icons-ivy-rich-mode 1))))

(setq ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev)

(ivy-set-display-transformer 'ivy-switch-buffer
                             'ivy-rich-switch-buffer-transformer)

(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
(global-set-key (kbd "C-S-s") 'swiper)
(global-set-key (kbd "C-S-r") 'swiper-backward)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-h f") 'counsel-describe-function)
(global-set-key (kbd "C-h v") 'counsel-describe-variable)
#+END_SRC

* ALL THE ICONS
#+BEGIN_SRC emacs-lisp
(straight-use-package 'all-the-icons)
(straight-use-package 'all-the-icons-dired)

(with-eval-after-load 'dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

* Transparency
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100))

  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))))
#+END_SRC

* Theme (Minimal Dark)
#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark t)
#+END_SRC
