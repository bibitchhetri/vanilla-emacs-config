#+TITLE: Vanilla Emacs Config
#+AUTHOR: Bibit Kunwar Chhetri
#+PROPERTY: header-args :tangle yes :results silent :exports code
#+STARTUP: overview indent hideblocks inlineimages entitiespretty
#+OPTIONS: toc:3 num:nil author:nil
#+LANGUAGE: en
#+CATEGORY: emacs-config
#+FILETAGS: emacs config

* TABLE OF CONTENTS :toc:
- [[#startup-essentials][Startup Essentials]]
  - [[#performance-optimization][Performance Optimization]]
  - [[#package-manager-straightel][Package Manager (straight.el)]]
  - [[#evil-mode-vim-emulation][Evil Mode (Vim Emulation)]]
  - [[#general-keybindings-hotkeys][General Keybindings (hotkeys)]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup-strategy][Backup Strategy]]
- [[#buffer-move][Buffer-Move]]
- [[#fonts][Fonts]]
  - [[#font-face][Font Face]]
  - [[#zoom-inout][Zoom In/Out]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#line-numbering][Line Numbering]]
  - [[#menubar-toolbar--scrollbar][Menubar, Toolbar & Scrollbar]]
- [[#ivy-counsel][Ivy (COUNSEL)]]
- [[#org-mode-enhancements][Org Mode Enhancements]]
  - [[#enable-toc--org-bullets][Enable TOC & Org Bullets]]
  - [[#org-tempo][Org Tempo]]
- [[#sudo-edit][SUDO Edit]]
- [[#shells--terminal][Shells & Terminal]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#theme-doom-themes][Theme (Doom Themes)]]
- [[#transparency][Transparency]]
- [[#window-focus-enhancement][Window Focus Enhancement]]
- [[#which-key][Which-Key]]
- [[#dashboard][Dashboard]]
- [[#startup-completion-message][Startup Completion Message]]

* Startup Essentials
** Performance Optimization
#+BEGIN_SRC emacs-lisp
;; Increase garbage collection threshold during startup for better performance
(setq gc-cons-threshold (* 50 1024 1024)) ; 50MB
;; Reset to normal threshold after startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 16 1024 1024)))) ; 16MB

;; Security settings
(setq enable-local-variables :safe
      enable-local-eval nil
      read-process-output-max (* 1024 1024)) ; 1MB
#+END_SRC

** Package Manager (straight.el)
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t
      straight-check-for-modifications '(find-when-checking))
#+END_SRC

** Evil Mode (Vim Emulation)
#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil
      evil-want-integration t
      evil-split-window-right t
      evil-split-window-below t
      evil-undo-system 'undo-redo)

(straight-use-package 'evil)
(require 'evil)
(evil-mode 1)

;; Scrolling & redo keybindings for all evil states
(with-eval-after-load 'evil
  (dolist (map '(evil-normal-state-map evil-visual-state-map evil-insert-state-map))
    (define-key (symbol-value map) (kbd "C-d") 'evil-scroll-down)
    (define-key (symbol-value map) (kbd "C-u") 'evil-scroll-up)
    (define-key (symbol-value map) (kbd "C-r") 'undo-redo)))

(straight-use-package 'evil-collection)
(with-eval-after-load 'evil
  (require 'evil-collection)
  (evil-collection-init))

(straight-use-package 'evil-tutor)
#+END_SRC

** General Keybindings (hotkeys)
#+BEGIN_SRC emacs-lisp
(straight-use-package 'general)
(require 'general)
(general-evil-setup)

(general-create-definer my/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "M-SPC")

(my/leader-keys
 ;; Buffer
 "b"  '(:ignore t :which-key "buffer")
 "b b" '(ivy-switch-buffer :which-key "Switch buffer")
 "b k" '(kill-this-buffer :which-key "Kill buffer")
 "b n" '(next-buffer :which-key "Next buffer")
 "b p" '(previous-buffer :which-key "Previous buffer")
 "b r" '(revert-buffer :which-key "Reload buffer")
 "b B" '(ivy-switch-buffer-other-window :which-key "Switch buffer other window")

 ;; File
 "f" '(:ignore t :which-key "file")
 "f f" '(counsel-find-file :which-key "Find file")
 "f r" '(counsel-recentf :which-key "Recent files")
 "f d" '(counsel-dired :which-key "Open dired")
 "f p" '(sudo-edit-find-file :which-key "Sudo find file")
 "f P" '(sudo-edit :which-key "Sudo edit file")

 ;; Help
 "h" '(:ignore t :which-key "Help")
 "h f" '(counsel-describe-function :which-key "Describe function")
 "h v" '(counsel-describe-variable :which-key "Describe variable")
 "h r r" '((lambda () (interactive)
             (load-file "~/.emacs.d/init.el"))
            :which-key "Reload emacs config")

 ;; Search
 "s" '(:ignore t :which-key "search")
 "s f" '(counsel-rg :which-key "Search in files")
 "s b" '(counsel-switch-buffer :which-key "Search buffers")
 "s m" '(counsel-imenu :which-key "Search in buffer")
 "s F" '(counsel-find-file :which-key "Find file fuzzy")
 "s R" '(counsel-recentf :which-key "Recent files")

 ;; Evaluate
 "e" '(:ignore t :which-key "Eshell/Evaluate")    
 "e b" '(eval-buffer :which-key "Evaluate elisp in buffer")
 "e d" '(eval-defun :which-key "Evaluate defun containing or after point")
 "e e" '(eval-expression :which-key "Evaluate and elisp expression")
 "e h" '(counsel-esh-history :which-key "Eshell history")
 "e l" '(eval-last-sexp :which-key "Evaluate elisp expression before point")
 "e r" '(eval-region :which-key "Evaluate elisp in region")
 "e s" '(eshell :which-key "Eshell")

 ;; Toggle
 "t" '(:ignore t :which-key "Toggle")
 "t l" '(display-line-numbers-mode :which-key "Toggle line numbers")
 "t t" '(visual-line-mode :which-key "Toggle truncated lines")
 "t e" '(eshell :which-key "Open eshell")
 "t V" '(my/vterm :which-key "Open vterm")
 "t v" '(my/vterm-toggle :which-key "Toggle vterm")
 "t T" '(toggle-transparency :which-key "Toggle transparency")

 ;; Window
 "w"  '(:ignore t :which-key "window")
 "w v" '(split-window-right :which-key "Split vertical")
 "w s" '(split-window-below :which-key "Split horizontal")
 "w c" '(delete-window :which-key "Delete window")
 "w n" '(evil-window-new :which-key "New window")
 "w o" '(delete-other-windows :which-key "Maximize window")
 "w j" '(evil-window-down :which-key "Move to window below")
 "w k" '(evil-window-up :which-key "Move to window above")
 "w h" '(evil-window-left :which-key "Move to window left")
 "w l" '(evil-window-right :which-key "Move to window right")
 "w w" '(other-window :which-key "Switch to other window")
 "w H" '(buf-move-left :which-key "Buffer move left")
 "w J" '(buf-move-down :which-key "Buffer move down")
 "w K" '(buf-move-up :which-key "Buffer move up")
 "w L" '(buf-move-right :which-key "Buffer move right")

 ;; Applications
 "a" '(:ignore t :which-key "applications")
 "a a" '(counsel-M-x :which-key "M-x")
 "a r" '(ivy-resume :which-key "Resume last search")
 "q q" '(save-buffers-kill-terminal :which-key "Quit Emacs"))
#+END_SRC

* ALL THE ICONS
#+BEGIN_SRC emacs-lisp
(straight-use-package 'all-the-icons)
(straight-use-package 'all-the-icons-dired)

(with-eval-after-load 'dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

* Backup Strategy
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backups"))
      version-control t
      kept-new-versions 5
      kept-old-versions 2
      delete-old-versions t)
(unless (file-exists-p "~/.emacs.d/backups")
  (make-directory "~/.emacs.d/backups" t))

;; Auto-save files
(setq auto-save-file-name-transforms `((".*" "~/.emacs.d/auto-save-list/" t)))
(unless (file-exists-p "~/.emacs.d/auto-save-list")
  (make-directory "~/.emacs.d/auto-save-list" t))
#+END_SRC

* Buffer-Move
#+BEGIN_SRC emacs-lisp
(straight-use-package 'buffer-move)
(require 'buffer-move)
#+END_SRC

* Fonts
** Font Face
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (let ((default-font (or (car (member "JetBrains Mono" (font-family-list)))
                          (car (member "SF Mono" (font-family-list))))))
    (when default-font
      (set-face-attribute 'default nil :font default-font :height 110 :weight 'medium)
      (add-to-list 'default-frame-alist `(font . ,(concat default-font "-11"))))))

;; Variable-pitch font
(when (and (display-graphic-p) (member "Ubuntu" (font-family-list)))
  (set-face-attribute 'variable-pitch nil :font "Ubuntu" :height 120 :weight 'medium))

;; Terminal font configuration for better icon support
(when (display-graphic-p)
  (let ((terminal-font (or (car (member "JetBrains Mono" (font-family-list)))
                          (car (member "SF Mono" (font-family-list)))
                          (car (member "Monaco" (font-family-list))))))
    (when terminal-font
      ;; Set vterm font after vterm is loaded
      (with-eval-after-load 'vterm
        (when (facep 'vterm)
          (set-face-attribute 'vterm nil :font terminal-font :height 110))))))

;; Syntax styling
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
(setq-default line-spacing 0.12)
#+END_SRC

** Zoom In/Out
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SRC

* GUI Tweaks
** Line Numbering
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+END_SRC

** Menubar, Toolbar & Scrollbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(when (eq system-type 'darwin)
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (set-frame-parameter (selected-frame) 'undecorated-round t))
#+END_SRC

* Ivy (COUNSEL)
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ivy)
(straight-use-package 'counsel)
(straight-use-package 'ivy-rich)
(straight-use-package 'swiper)
(straight-use-package 'all-the-icons-ivy-rich)
(straight-use-package 'flx)  ; Better fuzzy matching
(straight-use-package 'prescient)  ; Smart sorting and filtering

(setq ivy-use-virtual-buffers t
      ivy-count-format "(%d/%d) "
      enable-recursive-minibuffers t
      ;; Advanced fuzzy matching
      ivy-re-builders-alist '((t . ivy--regex-fuzzy)
                              (counsel-rg . ivy--regex-plus)
                              (counsel-ag . ivy--regex-plus)
                              (counsel-pt . ivy--regex-plus)
                              (counsel-grep . ivy--regex-plus)
                              (swiper . ivy--regex-plus)
                              (swiper-isearch . ivy--regex-plus))
      ;; Better sorting
      ivy-sort-functions-alist '((counsel-find-file . ivy-sort-files-alphabetically)
                                 (counsel-recentf . ivy-sort-files-by-mtime)
                                 (counsel-buffer . ivy-sort-buffer-by-mtime))
      ;; Case insensitive by default
      ivy-case-fold-search-default t
      ;; Better regex handling
      ivy-initial-inputs-alist nil)

(ivy-mode 1)
(counsel-mode 1)
(ivy-rich-mode 1)

;; Enable advanced fuzzy matching with flx (if available)
(when (require 'flx nil t)
  (setq ivy-flx-limit 10000))

;; Enable prescient for smart sorting (if available)
(when (require 'prescient nil t)
  (prescient-persist-mode 1)
  (setq prescient-save-file (expand-file-name "prescient-save.el" user-emacs-directory))
  (setq ivy-prescient-retain-classic-highlighting t)
  (when (fboundp 'ivy-prescient-mode)
    (ivy-prescient-mode 1)))

(add-hook 'after-init-hook
          (lambda ()
            (when (require 'all-the-icons-ivy-rich nil t)
              (all-the-icons-ivy-rich-mode 1))))

(setq ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev)

(ivy-set-display-transformer 'ivy-switch-buffer
                             'ivy-rich-switch-buffer-transformer)

(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
(global-set-key (kbd "C-S-s") 'swiper)
(global-set-key (kbd "C-S-r") 'swiper-isearch-backward)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-h f") 'counsel-describe-function)
(global-set-key (kbd "C-h v") 'counsel-describe-variable)

;; Buffer move keys
(global-set-key (kbd "<C-S-up>")     'buf-move-up)
(global-set-key (kbd "<C-S-down>")   'buf-move-down)
(global-set-key (kbd "<C-S-left>")   'buf-move-left)
(global-set-key (kbd "<C-S-right>")  'buf-move-right)

;; Global vterm-toggle keys
(global-set-key (kbd "C-c t") 'my/vterm-toggle)
(global-set-key (kbd "C-c T") 'my/vterm-toggle)

;; Additional vterm navigation keys (only if vterm is available)
(when (fboundp 'vterm-mode)
  (with-eval-after-load 'vterm
    (when (boundp 'vterm-mode-map)
      (define-key vterm-mode-map (kbd "C-c C-j") 'vterm-send-down)
      (define-key vterm-mode-map (kbd "C-c C-k") 'vterm-send-up)
      (define-key vterm-mode-map (kbd "C-c C-l") 'vterm-send-right)
      (define-key vterm-mode-map (kbd "C-c C-h") 'vterm-send-left)
      (define-key vterm-mode-map (kbd "C-c C-c") 'vterm-send-C-c)
      (define-key vterm-mode-map (kbd "C-c C-d") 'vterm-send-C-d))))
#+END_SRC

* Org Mode Enhancements
** Enable TOC & Org Bullets
#+BEGIN_SRC emacs-lisp
(straight-use-package 'toc-org)
(straight-use-package 'org-bullets)

;; Enable proper link following in org-mode
(setq org-link-search-must-match-exact-headline nil
      org-link-search-headline-must-match-exact nil)

;; Configure org-mode for better link handling
(with-eval-after-load 'org
  ;; Enable link following with mouse clicks
  (setq org-return-follows-link t)
  ;; Enable link following with keyboard
  (setq org-tab-follows-link t)
  ;; Make sure internal links work properly
  (setq org-link-search-must-match-exact-headline nil)
  
  ;; Explicitly bind keys for link following
  (define-key org-mode-map (kbd "RET") 'org-open-at-point)
  (define-key org-mode-map (kbd "TAB") 'org-next-link)
  (define-key org-mode-map (kbd "S-TAB") 'org-previous-link)
  ;; Alternative keybinding for RET if the above doesn't work
  (define-key org-mode-map (kbd "C-c C-o") 'org-open-at-point))

(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode 1)
            (org-bullets-mode 1)
            (toc-org-enable)
            ;; Ensure keyboard navigation works
            (local-set-key (kbd "RET") 'org-open-at-point)
            (local-set-key (kbd "TAB") 'org-next-link)
            (local-set-key (kbd "S-TAB") 'org-previous-link)))

(setq org-bullets-bullet-list '("◉" "○" "◈" "◇" "▪" "▫"))
#+END_SRC

** Org Tempo
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC

* SUDO Edit
#+BEGIN_SRC emacs-lisp
(straight-use-package 'sudo-edit)
(require 'sudo-edit)

(my/leader-keys
  "f p" '(sudo-edit-find-file :which-key "Sudo find file")
  "f P" '(sudo-edit :which-key "Sudo edit file"))
#+END_SRC

* Shells & Terminal
** Eshell
#+BEGIN_SRC emacs-lisp
(straight-use-package 'eshell-syntax-highlighting)

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 10000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input 'all
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh")
      eshell-highlight-prompt t
      eshell-prompt-regexp "^[^#$%>\n]*[#$%>] *"
      eshell-prompt-function
      (lambda nil
        (concat
         (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
         (propertize " $ " 'face 'eshell-prompt))))

(let ((eshell-dir (concat user-emacs-directory "eshell")))
  (unless (file-exists-p eshell-dir) (make-directory eshell-dir t))
  (unless (file-exists-p eshell-rc-script)
    (write-region "# Eshell profile\n\necho \"Welcome to Eshell!\"\n" nil eshell-rc-script))
  (unless (file-exists-p eshell-aliases-file)
    (write-region "# Eshell aliases\nalias ll 'ls -la'\nalias .. 'cd ..'\nalias c 'clear'\n" nil eshell-aliases-file)))

(with-eval-after-load 'esh-mode
  (when (require 'eshell-syntax-highlighting nil t)
    (eshell-syntax-highlighting-global-mode +1)))

(defun eshell/clear () (interactive) (let ((inhibit-read-only t)) (erase-buffer)))
(defun eshell-previous-prompt () (interactive) (eshell-bol) (re-search-backward eshell-prompt-regexp nil t))
(defun eshell-next-prompt () (interactive) (re-search-forward eshell-prompt-regexp nil t))

(with-eval-after-load 'eshell
  (define-key eshell-mode-map (kbd "C-c C-p") 'eshell-previous-prompt)
  (define-key eshell-mode-map (kbd "C-c C-n") 'eshell-next-prompt))
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(straight-use-package 'vterm)

;; Optimized vterm configuration for normal terminal behavior
(setq vterm-max-scrollback 10000
      vterm-buffer-name-string "vterm %s"
      vterm-kill-buffer-on-exit t
      vterm-timer-delay 0.01  ; Fast updates like normal terminal
      vterm-use-vterm-prompt-detection-method t  ; Enable for proper prompt handling
      vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=off"
      ;; Prevent unwanted scrolling
      vterm-scroll-to-bottom-on-input nil
      vterm-scroll-to-bottom-on-output nil
      ;; Additional terminal-like behavior
      vterm-clear-scrollback t)

;; Configure vterm mode for normal terminal behavior
(add-hook 'vterm-mode-hook
          (lambda ()
            ;; Disable auto-scrolling to prevent first row scrolling up
            (setq-local scroll-margin 0)
            (setq-local scroll-conservatively 0)
            (setq-local scroll-preserve-screen-position nil)
            ;; Keep cursor at bottom naturally
            (setq-local scroll-step 1)))

;; Optimized vterm function
(defun my/vterm ()
  "Open vterm in a new buffer with normal terminal behavior."
  (interactive)
  (condition-case err
      (progn
        (require 'vterm)
        (let ((buf (vterm (generate-new-buffer-name "*vterm*"))))
          ;; Ensure proper terminal behavior
          (with-current-buffer buf
            (setq-local scroll-margin 0)
            (setq-local scroll-conservatively 0))
          buf))
    (error (message "vterm failed: %s" (error-message-string err))
           (eshell))))
#+END_SRC

** Vterm-Toggle
#+BEGIN_SRC emacs-lisp
(straight-use-package 'vterm-toggle)

;; Safe vterm-toggle configuration
(defun my/vterm-toggle-safe-init ()
  "Safely initialize vterm-toggle with error handling."
  (condition-case err
      (progn
        (require 'vterm-toggle)
        (setq vterm-toggle-fullscreen-p nil
              vterm-toggle-scope 'project)
        (message "vterm-toggle loaded successfully")
        t)
    (error (message "Failed to load vterm-toggle: %s" (error-message-string err))
           nil)))

;; Only configure if vterm-toggle loads successfully
(when (my/vterm-toggle-safe-init)
  (defun my/vterm-toggle ()
    "Toggle vterm in current project with error handling."
    (interactive)
    (condition-case err
        (vterm-toggle)
      (error (message "Failed to toggle vterm: %s" (error-message-string err))
             (eshell)))))  ; Fallback to eshell
#+END_SRC

* Theme (Doom Themes)
#+BEGIN_SRC emacs-lisp
(straight-use-package 'doom-themes)
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-vibrant, doom-city-lights, doom-tokyo-night, etc.)
;; Ensure theme loads after doom-themes is fully initialized
(with-eval-after-load 'doom-themes
  (condition-case nil
      (load-theme 'doom-tokyo-night t)
    (error (message "Failed to load doom-tokyo-night theme, falling back to doom-one")
           (load-theme 'doom-one t))))

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)
;; or for treemacs users
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC

* Transparency
#+BEGIN_SRC emacs-lisp
(defun toggle-transparency ()
  "Toggle transparency between 100 and 90%."
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter nil 'alpha
                         (if (equal alpha '(100 . 100))
                             '(90 . 90)
                           '(100 . 100)))))

(set-frame-parameter (selected-frame) 'alpha '(100 . 100))
#+END_SRC

* Window Focus Enhancement
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Auto-focus new windows
(advice-add 'split-window-below :after #'other-window)
(advice-add 'split-window-right :after #'other-window)
#+END_SRC

* Which-Key
#+BEGIN_SRC emacs-lisp
(straight-use-package 'which-key)
(require 'which-key)
(setq which-key-idle-delay 0.3)
(which-key-mode)
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
(straight-use-package 'dashboard)
(straight-use-package 'page-break-lines)
(straight-use-package 'projectile)

;; Ensure all-the-icons is loaded first
(require 'all-the-icons)

;; Configure projectile for projects
(require 'projectile)
(projectile-mode +1)
(setq projectile-project-search-path '("~/workspaces/" "~/projects/" "~/code/" "~/"))
(setq dashboard-projects-backend 'projectile)

;; Dashboard configuration
(setq dashboard-banner-logo-title "BKC's Emacs Dashboard"
      dashboard-startup-banner (expand-file-name "img/logo.png" user-emacs-directory)  ; Use custom logo
      dashboard-center-content t      ; Center content horizontally
      dashboard-vertically-center-content t ; Vertically center content
      dashboard-navigation-cycle t ; Enable cycle navigation between each section
      dashboard-show-shortcuts nil    ; Disable shortcut indicators
      dashboard-icon-type 'all-the-icons  ; Use all-the-icons
      dashboard-set-heading-icons t  ; Add icons to headings
      dashboard-set-file-icons t     ; Add icons to files
      dashboard-items '((recents   . 5)
                        (bookmarks . 5)
                        (projects  . 5))
      ;; Enable navigator
      dashboard-set-navigator t)

;; Enable dashboard at startup
(dashboard-setup-startup-hook)

;; Use custom footer with your name
(setq dashboard-set-footer t
      dashboard-footer-messages '("Powered by Bibit Kunwar Chhetri"))

;; Create custom function to add separators around dashboard items
(defun dashboard-insert-items-with-separators ()
  "Insert dashboard items with separators around each section."
  ;; Insert separator at the top - ensure full width
  (let ((width (frame-width)))
    (insert (propertize (make-string width ?─) 'face 'shadow))
    (dashboard-insert-newline))
  
  ;; Use the default dashboard items insertion (which handles headings with icons)
  (dashboard-insert-items)
  
  ;; Insert separator at the bottom - ensure full width
  (dashboard-insert-newline)
  (let ((width (frame-width)))
    (insert (propertize (make-string width ?─) 'face 'shadow))))

;; Ensure navigator is included in dashboard layout with separators
(setq dashboard-startupify-list '(dashboard-insert-banner
                                   dashboard-insert-newline
                                   dashboard-insert-banner-title
                                   dashboard-insert-newline
                                   dashboard-insert-navigator
                                   dashboard-insert-newline
                                   dashboard-insert-init-info
                                   dashboard-insert-newline
                                   dashboard-insert-newline
                                   dashboard-insert-items-with-separators
                                   dashboard-insert-newline
                                   dashboard-insert-newline
                                   dashboard-insert-footer))

;; Configure for emacs daemon
(setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))

;; Configure navigator buttons (horizontal layout)
(setq dashboard-navigator-buttons
      `(;; Single horizontal line
        ((,(when (fboundp 'all-the-icons-octicon)
             (all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0))
          "Homepage"
          "Browse homepage"
          (lambda (&rest _) (browse-url "https://github.com/bibitchhetri")))
         ("★" "Blog" "Show stars" (lambda (&rest _) (browse-url "https://bibitkunwar.com.np")) warning)
         ("?" "" "?/h" #'show-help nil "<" ">")
         (,(when (fboundp 'all-the-icons-faicon)
             (all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0))
          "Refresh"
          "Refresh dashboard"
          (lambda (&rest _) (dashboard-refresh-buffer)))
         ("🔄" "Restart" "Restart Emacs" (lambda (&rest _) (restart-emacs)) error))))

;; Ensure custom logo is loaded
(with-eval-after-load 'dashboard
  (when (file-exists-p (expand-file-name "img/logo.png" user-emacs-directory))
    (setq dashboard-startup-banner (expand-file-name "img/logo.png" user-emacs-directory))))

;; Enable page-break-lines globally for better separators
(global-page-break-lines-mode)

;; Add dashboard keybindings
(my/leader-keys
  "d" '(:ignore t :which-key "dashboard")
  "d d" '(dashboard-open :which-key "Open dashboard")
  "d r" '(dashboard-refresh-buffer :which-key "Refresh dashboard")
  "d a" '(projectile-add-known-project :which-key "Add project"))

;; Helper function to add common projects
(defun my/add-common-projects ()
  "Add common project directories to projectile."
  (interactive)
  (let ((common-projects '("~/.emacs.d" "~/.dotfiles" "~/workspaces" "~/projects" "~/code")))
    (dolist (project common-projects)
      (when (file-exists-p (expand-file-name project))
        (projectile-add-known-project project)))))
#+END_SRC

* Startup Completion Message
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %.2f seconds with %d garbage collections."
                     (float-time (time-subtract after-init-time before-init-time))
                     gcs-done)))
#+END_SRC
